{"version":3,"file":"/Users/taojiang/Documents/work/redux_study/redux_/src/applyMiddleWares.ts","sources":["/Users/taojiang/Documents/work/redux_study/redux_/src/applyMiddleWares.ts"],"names":[],"mappings":";;AACA,uCAAoC;AAQpC;;;;;;;GAOG;AACH,MAAM,gBAAgB,GAAG,CAAC,GAAG,WAAyB,EAAE,EAAE;IAExD,uCAAuC;IACvC,OAAO,CAAC,gBAA0B,EAAE,EAAE;QAEpC,+CAA+C;QAC/C,OAAO,SAAS,cAAc,CAAC,OAAgB,EAAE,SAAc;YAC7D,OAAO,CAAC,GAAG,CAAC,OAAO,EAAC,SAAS,CAAC,CAAC;YAC/B,IAAI,KAAK,GAAU,gBAAgB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YAExD,cAAc;YACd,IAAI,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;gBACvC,OAAO,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YACpC,CAAC,CAAC,CAAA;YAEF,wCAAwC;YACxC,IAAI,QAAQ,GAAG,iBAAO,CAAC,GAAG,KAAK,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YACjD,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAC1B,OAAO,KAAK,CAAC;QACf,CAAC,CAAA;IACH,CAAC,CAAA;AACH,CAAC,CAAA;AAEQ,4CAAgB","sourcesContent":["import { Reducer, AnyAction } from '.';\nimport { compose } from './compose';\nimport { Store } from './createStore';\n\n/**\n * 定义Middleware 洋葱模型 一个三次闭包的中间函数\n */\ntype Middleware = (stateFn: () => any) => (next: Reducer) => (action: AnyAction) => void;\n\n/**\n * 中间件，\n * \n * 1.先用洋葱模型，\ba(),b(),c() = a(b(c())) 这个的方式包裹 dispatch;\n * 需要重写 createStore 以及需要吧 store.dispatch 给替换掉\n * \n * @param middlewares \n */\nconst applyMiddleWares = (...middlewares: Middleware[]) => {\n\n  /**oldCreateStoreFN 是之前的 createStore */\n  return (oldCreateStoreFN: Function) => {\n\n    /**这里重写了 createStore 方法并且 替换了 dispatch 的函数因子 */\n    return function newCreateStore(reducer: Reducer, initState: any) {\n      console.log(reducer,initState);\n      let store: Store = oldCreateStoreFN(reducer, initState);\n\n      //设置中间件的 state\n      let chain = middlewares.map(middleware => {\n        return middleware(store.getState);\n      })\n\n      /**中间件包裹 .dispatch 方法，这个是一个组合颗粒化的一个过程 */\n      let dispatch = compose(...chain)(store.dispatch);\n      store.dispatch = dispatch;\n      return store;\n    }\n  }\n}\n\nexport { applyMiddleWares, Middleware }"]}